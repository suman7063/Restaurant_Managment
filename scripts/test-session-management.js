#!/usr/bin/env node

/**
 * Test Script for Session Management
 * Tests the admin session management functionality
 */

const BASE_URL = 'http://localhost:3000';

async function testSessionManagement() {
  console.log('🧪 Testing Session Management Functionality\n');

  try {
    // Test 1: Get all sessions (admin endpoint)
    console.log('1. Testing GET /api/admin/sessions');
    const sessionsResponse = await fetch(`${BASE_URL}/api/admin/sessions`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token' // Mock token for testing
      }
    });

    if (sessionsResponse.ok) {
      const sessionsData = await sessionsResponse.json();
      console.log('✅ Sessions retrieved successfully');
      console.log(`   - Total sessions: ${sessionsData.data.totalSessions}`);
      console.log(`   - Active sessions: ${sessionsData.data.activeSessions}`);
      console.log(`   - Total revenue: $${(sessionsData.data.totalRevenue / 100).toFixed(2)}`);
    } else {
      console.log('❌ Failed to retrieve sessions');
      console.log(`   Status: ${sessionsResponse.status}`);
    }

    // Test 2: Create a test session
    console.log('\n2. Testing POST /api/sessions (create session)');
    const createSessionResponse = await fetch(`${BASE_URL}/api/sessions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token'
      },
      body: JSON.stringify({
        tableId: 'table-test-1',
        restaurantId: 'test-restaurant'
      })
    });

    if (createSessionResponse.ok) {
      const createData = await createSessionResponse.json();
      console.log('✅ Test session created successfully');
      console.log(`   - Session ID: ${createData.data.sessionId}`);
      console.log(`   - OTP: ${createData.data.otp}`);
      console.log(`   - Status: ${createData.data.status}`);
    } else {
      console.log('❌ Failed to create test session');
      console.log(`   Status: ${createSessionResponse.status}`);
    }

    // Test 3: Regenerate OTP
    console.log('\n3. Testing POST /api/sessions/{sessionId}/regenerate-otp');
    const regenerateResponse = await fetch(`${BASE_URL}/api/sessions/session-1/regenerate-otp`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token'
      }
    });

    if (regenerateResponse.ok) {
      const regenerateData = await regenerateResponse.json();
      console.log('✅ OTP regenerated successfully');
      console.log(`   - New OTP: ${regenerateData.data.newOtp}`);
      console.log(`   - Regenerated by: ${regenerateData.data.regeneratedBy}`);
    } else {
      console.log('❌ Failed to regenerate OTP');
      console.log(`   Status: ${regenerateResponse.status}`);
    }

    // Test 4: Close session
    console.log('\n4. Testing PUT /api/sessions/{sessionId}/close');
    const closeResponse = await fetch(`${BASE_URL}/api/sessions/session-1/close`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token'
      }
    });

    if (closeResponse.ok) {
      const closeData = await closeResponse.json();
      console.log('✅ Session closed successfully');
      console.log(`   - Message: ${closeData.message}`);
    } else {
      console.log('❌ Failed to close session');
      console.log(`   Status: ${closeResponse.status}`);
    }

    // Test 5: Get session details
    console.log('\n5. Testing GET /api/sessions/{sessionId}');
    const detailsResponse = await fetch(`${BASE_URL}/api/sessions/session-1`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (detailsResponse.ok) {
      const detailsData = await detailsResponse.json();
      console.log('✅ Session details retrieved successfully');
      console.log(`   - Session ID: ${detailsData.data.sessionId}`);
      console.log(`   - Table ID: ${detailsData.data.tableId}`);
      console.log(`   - Status: ${detailsData.data.status}`);
      console.log(`   - Total Amount: $${(detailsData.data.totalAmount / 100).toFixed(2)}`);
    } else {
      console.log('❌ Failed to retrieve session details');
      console.log(`   Status: ${detailsResponse.status}`);
    }

    // Test 6: Get session customers
    console.log('\n6. Testing GET /api/sessions/{sessionId}/customers');
    const customersResponse = await fetch(`${BASE_URL}/api/sessions/session-1/customers`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (customersResponse.ok) {
      const customersData = await customersResponse.json();
      console.log('✅ Session customers retrieved successfully');
      console.log(`   - Total customers: ${customersData.data.totalCustomers}`);
      if (customersData.data.customers.length > 0) {
        console.log(`   - First customer: ${customersData.data.customers[0].name}`);
      }
    } else {
      console.log('❌ Failed to retrieve session customers');
      console.log(`   Status: ${customersResponse.status}`);
    }

    // Test 7: Get session orders
    console.log('\n7. Testing GET /api/sessions/{sessionId}/orders');
    const ordersResponse = await fetch(`${BASE_URL}/api/sessions/session-1/orders`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (ordersResponse.ok) {
      const ordersData = await ordersResponse.json();
      console.log('✅ Session orders retrieved successfully');
      console.log(`   - Total orders: ${ordersData.data.totalOrders}`);
      console.log(`   - Total amount: $${(ordersData.data.totalAmount / 100).toFixed(2)}`);
    } else {
      console.log('❌ Failed to retrieve session orders');
      console.log(`   Status: ${ordersResponse.status}`);
    }

    console.log('\n🎉 Session Management Tests Completed!');
    console.log('\n📋 Summary:');
    console.log('   - Admin session management endpoints are working');
    console.log('   - Session creation and management functions are operational');
    console.log('   - OTP regeneration and session closure are functional');
    console.log('   - Session details, customers, and orders can be retrieved');

  } catch (error) {
    console.error('❌ Test failed with error:', error.message);
    console.log('\n💡 Make sure the development server is running on http://localhost:3000');
  }
}

// Run the tests
if (require.main === module) {
  testSessionManagement();
}

module.exports = { testSessionManagement }; 